#!/usr/bin/env python

import numpy
import matplotlib.pyplot as plt
import matplotlib.ticker as mtick
import sys

MIN_YEAR = 1933
MAX_YEAR = 2023
MIN_RUNTIME = 0
MAX_RUNTIME = 240

def load(rf):
  linenum = 0
  hindex = dict()
  hindex_kind = None
  hindex_year = None
  hindex_runtime = None
  for line in rf:
    fields = line.rstrip('\n').split('\t')
    linenum += 1
    if linenum == 1:
      hindex = dict(zip(fields, xrange(int(1e6))))
      hindex_kind = hindex['titleType']
      hindex_year = hindex['startYear']
      hindex_runtime = hindex['runtimeMinutes']
      continue
    fields = [ None if v == '\\N' else v for v in fields ]
    kind = fields[hindex_kind]
    if kind != 'movie':
      continue
    year = fields[hindex_year]
    if year == None:
      continue
    year = int(year)
    if not (MIN_YEAR <= year <= MAX_YEAR):
      continue
    runtime = fields[hindex_runtime]
    if runtime == None:
      continue
    runtime = int(runtime)
    if not (MIN_RUNTIME <= runtime <= MAX_RUNTIME):
      continue
    yield (year, runtime)

def main():
  args = sys.argv[1:]
  rf = file(args.pop(0)) if args else sys.stdin
  datasets = [ [] for year in xrange(MAX_YEAR - MIN_YEAR + 1) ]
  linenum = 0
  for year, runtime in load(rf):
    linenum += 1
    datasets[year - MIN_YEAR].append(runtime)
    sys.stderr.write("\rloading movie %09d" % linenum)
  print >> sys.stderr, ""
  for year in xrange(MIN_YEAR, MAX_YEAR + 1):
    print >> sys.stderr, "analyzing year %d" % year
    data = datasets[year - MIN_YEAR]
    fig, ax = plt.subplots(1, 1)
    fig.suptitle('Movie Runtimes, %s' % year)
    N, bins, patches = ax.hist(data, bins=MAX_RUNTIME - MIN_RUNTIME + 1, range=[MIN_RUNTIME, MAX_RUNTIME], density=True)
    patches[60].set_facecolor('r')
    patches[90].set_facecolor('r')
    patches[120].set_facecolor('r')
    ax.yaxis.set_major_formatter(mtick.PercentFormatter(1.0))
    ax.tick_params(axis='both', which='major', labelsize=8)
    plt.xlabel('minutes')
    plt.xticks(sorted([40, 50] + list(xrange(MIN_RUNTIME, MAX_RUNTIME, 30))))
    plt.ylim(0, 0.125)
    plt.savefig('%04d.png' % year, dpi=300)
    plt.clf()
    plt.cla()
    plt.close()

if __name__ == '__main__':
  main()
